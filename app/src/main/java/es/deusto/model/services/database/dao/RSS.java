package es.deusto.model.services.database.dao;

import java.util.List;
import es.deusto.model.services.database.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "RSS".
 */
public class RSS {

    private Long id;
    private String name;
    private String imageUri;
    private String url;
    private Long rssID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RSSDao myDao;

    private List<Noticia> noticiaList;

    public RSS() {
    }

    public RSS(Long id) {
        this.id = id;
    }

    public RSS(Long id, String name, String imageUri, String url, Long rssID) {
        this.id = id;
        this.name = name;
        this.imageUri = imageUri;
        this.url = url;
        this.rssID = rssID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRSSDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getImageUri() {
        return imageUri;
    }

    public void setImageUri(String imageUri) {
        this.imageUri = imageUri;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Long getRssID() {
        return rssID;
    }

    public void setRssID(Long rssID) {
        this.rssID = rssID;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Noticia> getNoticiaList() {
        if (noticiaList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NoticiaDao targetDao = daoSession.getNoticiaDao();
            List<Noticia> noticiaListNew = targetDao._queryRSS_NoticiaList(id);
            synchronized (this) {
                if(noticiaList == null) {
                    noticiaList = noticiaListNew;
                }
            }
        }
        return noticiaList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNoticiaList() {
        noticiaList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
