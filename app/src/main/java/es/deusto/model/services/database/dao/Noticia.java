package es.deusto.model.services.database.dao;

import es.deusto.model.services.database.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "NOTICIA".
 */
public class Noticia {

    private Long id;
    private Long noticiaID;
    private String titulo;
    private String descripcion;
    private String image;
    private String link;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NoticiaDao myDao;

    private RSS rSS;
    private Long rSS__resolvedKey;


    public Noticia() {
    }

    public Noticia(Long id) {
        this.id = id;
    }

    public Noticia(Long id, Long noticiaID, String titulo, String descripcion, String image, String link) {
        this.id = id;
        this.noticiaID = noticiaID;
        this.titulo = titulo;
        this.descripcion = descripcion;
        this.image = image;
        this.link = link;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoticiaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getNoticiaID() {
        return noticiaID;
    }

    public void setNoticiaID(Long noticiaID) {
        this.noticiaID = noticiaID;
    }

    public String getTitulo() {
        return titulo;
    }

    public void setTitulo(String titulo) {
        this.titulo = titulo;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }

    /** To-one relationship, resolved on first access. */
    public RSS getRSS() {
        Long __key = this.noticiaID;
        if (rSS__resolvedKey == null || !rSS__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RSSDao targetDao = daoSession.getRSSDao();
            RSS rSSNew = targetDao.load(__key);
            synchronized (this) {
                rSS = rSSNew;
            	rSS__resolvedKey = __key;
            }
        }
        return rSS;
    }

    public void setRSS(RSS rSS) {
        synchronized (this) {
            this.rSS = rSS;
            noticiaID = rSS == null ? null : rSS.getId();
            rSS__resolvedKey = noticiaID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
